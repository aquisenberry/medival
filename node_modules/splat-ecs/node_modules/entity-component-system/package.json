{
  "name": "entity-component-system",
  "version": "1.2.1",
  "description": "An implementation of the Entity component system (ECS) pattern used commonly in video games.",
  "main": "index.js",
  "scripts": {
    "lint": "bash -c \"jshint *.js\"",
    "build": "npm run lint && npm test",
    "test": "node index.test.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/ericlathrop/entity-component-system.git"
  },
  "keywords": [
    "game",
    "video game",
    "ecs",
    "entity component system"
  ],
  "author": {
    "name": "Eric Lathrop",
    "email": "eric@ericlathrop.com",
    "url": "http://ericlathrop.com/"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/ericlathrop/entity-component-system/issues"
  },
  "homepage": "https://github.com/ericlathrop/entity-component-system",
  "devDependencies": {
    "jshint": "^2.5.10",
    "tape": "^3.0.3"
  },
  "jshintConfig": {
    "camelcase": true,
    "curly": true,
    "eqeqeq": true,
    "forin": true,
    "freeze": true,
    "immed": true,
    "indent": 4,
    "latedef": "nofunc",
    "newcap": true,
    "noarg": true,
    "noempty": true,
    "nonbsp": true,
    "nonew": true,
    "quotmark": "double",
    "unused": "strict",
    "trailing": true,
    "browser": true,
    "devel": true,
    "globalstrict": true,
    "node": true,
    "globals": {}
  },
  "dependencies": {},
  "readme": "# entity-component-system\n\nAn implementation of the [Entity component system](https://en.wikipedia.org/wiki/Entity_component_system) (ECS) pattern used commonly in video games.\n\nECS is a way of organizing a system using composition instead of inheritance. It allows you to turn behaviors on and off by adding and removing components to entities.\n\nThis module manages the running an array of \"systems\" over an array of entities. \nAn \"entity\" is a plain-old-javascript object.\nA \"component\" is a piece of data stored on a key inside an entity.\nA \"system\" is a function.\n\n# Example\n\nThis is an example video game rendering loop:\n\n```javascript\nfunction drawBackground(entities, context) { /* ... */ }\nfunction drawEntity(entity, context) { /* ... */ }\n\nvar ECS = require(\"entity-component-system\");\nvar ecs = new ECS();\necs.add(drawBackground);\necs.addEach(drawEntity, [\"sprite\"]); // only run on entities with a \"sprite\" component\n\nvar entities = [];\n// TODO: create entities and populate the entities array\n\nvar canvas = document.getElementById(\"canvas\");\nvar context = canvas.getContext(\"2d\");\n\nvar render = function(time) {\n\tecs.run(entities, context);\n\twindow.requestAnimationFrame(render);\n};\nwindow.requestAnimationFrame(render);\n```\n\n# add(system)\n\nAdds a \"system\" to the ECS, where a system is a function.\nThe system is called once every time `run()` is called.\nThe first parameter passed to the system is the array of entities to operate on.\nAny additional parameters are the same as what was passed to `run()`.\n\n# addEach(system, requirements)\n\nAdds a \"system\" to the ECS, where a system is a function.\nThe system is called once for each entity in the array or object of entities passed to `run()`.\nThe first parameter passed to the system a single entity.\nAny additional parameters are the same as what was passed to `run()`.\n\nIf `requirements` exists, it should be an array of string key names.\nThe system will only be invoked for entities that have the keys specified in `requirements`.\n\n# run(entities, [arguments])\n\nInvokes all systems with the specified `entities`. Any optional extra arguments will be passed through to each system. Returns an array of elapsed times for each system that ran.\n\n# Design Goals\n\n1. Perform no allocations during calls to `run()`. This is to avoid triggering garbage collection which can make games stutter.\n2. Don't manage entities. This lets users implement object pools to prevent triggering garbage collection.\n\n# Install\n\nWith [npm](https://www.npmjs.com/) do:\n\n```\nnpm install entity-component-system\n```\n\n# License\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "entity-component-system@1.2.1",
  "_from": "entity-component-system@^1.2.1"
}
